iot_vs_noniot_instances
----------------
This script to generate instances to classify IoT devices from non IoT devices.
Here we extract the instances same way as we do for device classification.
But after instance extraction we have to sample the Iot instances and relabel the class with 98, while IoT devices will get 99.

The order of processing:

all of these actions are coded for automation in ./py-postprocess/iot_vs_noniot_instances/gen_iot_noniot_instances.py
1) Merge all instances (avoid attack traffic) (iot_vs_noniot_instances/data/device_identification_full_dataset.csv)
2) set sampling frequency is still 15. I hope it is ok to get enough instances
3) Got instance count. NonIoT count is around 1200. altogather we have 17 IoT devices
4) So I decided to have 1200*66%(~800) non-IoT instances as training set and the remaining as testing.
   Meanwhile I selected 800/17(~50) instances from each devices for the training of IoT
5) Used split_instances tool to separate instances as said in (4). I set spliting instance counts manually using a dict.
	So if you add or remove any devices, you have to edit that dictionary
6) replace all Iot device labels with 98 and noniot device labels with 99 using replace_label tool
7) Test on weka. It includes 3 steps:
			make last column nominal,
			get the prediction without timestamp attribute which is placed as first col
			print the confusion matix
8) I print the confusion matrix and checked the confident levels. Accuracy above 98 %

of_activity_instacnes
----------------
Plan:
#Download pcap files
#merge it using mergepcap tool

process: pcap files
#get activity using upload and download flows of each devices.
#To do this we need to put 2 flows per devices in static flows download flow: destination mac address, upload flow: source mac addresses

Annotation script:
#Download annotation file: Annotation file contains switch on and switch off annotation.
#Currently we don't need switch off annotation. But it may be helpful to identify the slient period of devices

#script to find the network activity during the booting
#write a script to plot the network pattern for a specified time of flow activity log generated by simulator.

Identify the boot start and stop 
Boot start and stop found as follows
Amazon Echo	-	1	-	35 - 105
Belkin Switch 	-	6	-	50 - 60
Dropcam	-	9	-	20 - 50
Lifx	-	14	-	10 - 50

Find activity start and stop - done

modify python code to annotate with device specific start and stop
	during the annotation, currently my code check is there an annotation within a short range
	But now I have to change it to check the device wise time range
	first I will have time ID of instances and device

	Build a has table annotation for every second
	table of annotation needs annotation time gap 
	Annotation hash will be as follows
	annotation_hash[device][time] = activity

	Annotation_margin_dict = Device_class:{activity:[start from annotation,end from annotation]},

The order of processing:
1) Generate instance using activity_instance.py. Note: you may have to set resolution interval in 2 places
		1 - execute function
		2 - SIM_RESOLUTION TIME in config file
		2 - in annotation instance time
the activities mentioned below is mentioned in classify_activities.py
2) merge instances from all activities with annotations
3) split instances of each devices separately
4) Split 40 instances as training and rest as testing instances
5) then test using weka and get the confusion matrix

Current Issue: Resolution time vs Attribute time

of_dev_instances
----------------

of_state_instacnes
----------------

tools
----------------

